name: Build new release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  # Gets the build version and information about if this is a new version
  get-version:
    name: Get version
    runs-on: ubuntu-latest
    outputs:
      is_new_version: ${{ steps.get_version.outputs.IS_NEW_VERSION }}
      version: ${{ steps.get_version.outputs.VERSION }}
      build_date: ${{ steps.get_version.outputs.BUILD_DATE }}
      is_prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: git fetch --tags
      - run: |
          sudo apt-get update
          sudo apt-get install jq -y
      - name: Get Build Version
        id: get_version
        run: ./scripts/check-version.sh
        shell: bash

  build-docker:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: [get-version]
    steps:
    - uses: actions/checkout@master
    - name: Setup QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: linux/amd64
    - name: Setup Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        buildkitd-flags: --debug
    - name: Generate tags
      id: generate-tags
      env:
        VERSION: ${{ needs.get-version.outputs.version }}
        IS_NEW_VERSION: ${{ needs.get-version.outputs.is_new_version }}
        IS_PRERELEASE: ${{ needs.get-version.outputs.is_prerelease }}
      # if it's a new non prerelease version tag with hash, version latest-dev and latest
      # if it's a new prerelease version tag with hash, version and latest-dev
      # if it's a non new version tag with hash and latest-dev
      run: |
        if [ "$IS_NEW_VERSION" == "true" ]; then
          echo "##[set-output name=VERSION_TAG;]ghcr.io/digicatapult/vitalam-api:$VERSION";
          if [ "$IS_PRERELEASE" == "false" ]; then
            echo "##[set-output name=LATEST_TAG;]ghcr.io/digicatapult/vitalam-api:latest";
          else
            echo "##[set-output name=LATEST_TAG;]";
          fi;
        else
          echo "##[set-output name=VERSION_TAG;]";
          echo "##[set-output name=LATEST_TAG;]";
        fi;
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build image
      uses: docker/build-push-action@v2
      with:
        load: true
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        tags: |
          ghcr.io/digicatapult/vitalam-api:${{ github.sha }}
          ghcr.io/digicatapult/vitalam-api:latest-dev
          ${{ steps.generate-tags.outputs.VERSION_TAG }}
          ${{ steps.generate-tags.outputs.LATEST_TAG }}
        labels: |
          org.opencontainers.image.title=vitalam-api
          org.opencontainers.image.description=${{ github.event.repository.description }}
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.url=${{ github.event.repository.html_url }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.version=${{ needs.get-version.outputs.version }}
          org.opencontainers.image.created=${{ needs.get-version.outputs.build_date }}
    - name: Publish image
      run: docker push --all-tags ghcr.io/digicatapult/vitalam-api

  # Github releases are only performed when the release version changes
  build-release:
    name: Build release
    runs-on: ubuntu-latest
    needs: [build-docker, get-version]
    if: ${{ needs.get-version.outputs.is_new_version == 'true' }}

    steps:
      - uses: actions/checkout@master
      - name: Build release version
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ needs.get-version.outputs.version }}
          title: Release ${{ needs.get-version.outputs.version }}
          prerelease: ${{ needs.get-version.outputs.is_prerelease == 'true' }}
      - name: Build release latest
        if: ${{ needs.get-version.outputs.is_prerelease != 'true' }}
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: latest
          title: Latest Release ${{ needs.get-version.outputs.version }}
          prerelease: false
      - name: Build release latest-dev
        if: ${{ needs.get-version.outputs.is_prerelease == 'true' }}
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: latest-dev
          title: Latest Dev Release ${{ needs.get-version.outputs.version }}
          prerelease: true
